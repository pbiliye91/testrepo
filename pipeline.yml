parameters:
  - name: ServiceConnection
    displayName: Service Connection Name Follows Below:-
    default: tes-vm-sc
    values:
      - tes-vm-sc
  - name: image
    displayName: PoolImage
    default: windows-latest
    type: string
    values:
      - windows-latest
      - ubuntu-latest
variables:
  ResourceGroup: mcmd-dev-rg
  StorageAccount: samlinkstorage1234
  Container: test-vm
  TfstateFile: test-vm/terraform.tfstate
  BuildAgent: ${{ parameters.image }}
  #WorkingDir: $(System.DefaultWorkingDirectory)/variables
  #Target: $(build.artifactstagingdirectory)/AMTF
  Environment: test
 # Artifact: AM
 VmLoginPassword: $[ group.vm_login_password.vm_login_password ]
 
trigger:
- main

pool:
  vmImage: $(BuildAgent)

stages:
- stage: PLAN
  jobs:
  - job: PLAN
    displayName: PLAN     
    steps:
    # Install Terraform Installer in the Build Agent:-
    - task: TerraformInstaller@1
      displayName: Install terrform version - LATEST
      inputs:
        terraformVersion: 'latest'
   # Terraform Init:-
    - task: TerraformTaskV4@4
      displayName: TERRAFORM INIT
      inputs:
        provider: 'azurerm'
        command: 'init'
        #workingDirectory: '$(workingDir)' # Az DevOps can find the required Terraform code
        backendServiceArm: '${{ parameters.ServiceConnection }}'
        backendAzureRmResourceGroupName: '$(ResourceGroup)' 
        backendAzureRmStorageAccountName: '$(StorageAccount)'
        backendAzureRmContainerName: '$(Container)'
        backendAzureRmKey: '$(TfstateFile)'
   # Terraform Validate:-
    - task: TerraformTaskV4@4
      displayName: TERRAFORM VALIDATE
      inputs:
        provider: 'azurerm'
        command: 'validate'
      # workingDirectory: '$(workingDir)'
        environmentServiceNameAzureRM: '${{ parameters.ServiceConnection }}'
   # Terraform Plan:-
    - task: TerraformTaskV2@2
      displayName: TERRAFORM PLAN
      inputs:
        provider: 'azurerm'
        command: 'plan'
      # workingDirectory: '$(workingDir)'
      # commandOptions: "--var-file=terraform.tfvars --out=tfplan"
        environmentServiceNameAzureRM: '${{ parameters.ServiceConnection }}'
- stage: deploy
  jobs:
    - deployment: DEPLOY
      continueOnError: false
      environment: $(Environment)
      pool:
        vmImage: '$(BuildAgent)'
      strategy:
       runOnce:
          deploy:
            steps:
              - checkout: self
              - task: TerraformInstaller@0
                displayName: terraform install
                inputs:
                  terraformVersion: 'latest'
             # Terraform Init:-
              - task: TerraformTaskV4@4
                displayName: TERRAFORM INIT
                inputs:
                  provider: 'azurerm'
                  command: 'init'
                  backendServiceArm: '${{ parameters.ServiceConnection }}'
                  backendAzureRmResourceGroupName: '$(ResourceGroup)' 
                  backendAzureRmStorageAccountName: '$(StorageAccount)'
                  backendAzureRmContainerName: '$(Container)'
                  backendAzureRmKey: '$(TfstateFile)'
             # Terraform Apply:-
              - task: TerraformTaskV2@2
                displayName: TERRAFORM APPLY # The terraform Plan stored earlier is used here to apply only the changes.
                inputs:
                   provider: 'azurerm'
                   command: 'apply'
               #   commandOptions: '--var-file=terraform.tfvars'
                   environmentServiceNameAzureRM: '${{ parameters.ServiceConnection }}'
